generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  spent     Float   @default(0)
  sold      Float   @default(0)
  balance   Float   @default(0)
  drops     Drop[]  @relation("toPlayer")
  nfts      NFT[]
  sales     Sale[]  @relation("fromPlayer")
  purchases Sale[]  @relation("toPlayer")
  username  User?
  guilds    Guild[] @relation("memberOfGuild")
}

model NFT {
  id          Int     @id @default(autoincrement())
  composedId  String  @unique
  issuedId    Int
  ownerName   String?
  archetypeId String?
  drops       Drop[]
  item        Item?   @relation(fields: [archetypeId], references: [archetypeId])
  owner       Player? @relation(fields: [ownerName], references: [name])
  sales       Sale[]
}

model Item {
  archetypeId    String      @id @unique
  name           String      @unique
  description    String?
  imageUrl       String?
  floorPrice     Float?
  maxIssuance    Int
  rarityName     String?
  collectionName String?
  optionName     String
  totalTransfers Int
  lastApiPull    DateTime?
  lastSync       DateTime?
  synced         Boolean
  collection     Collection? @relation(fields: [collectionName], references: [name])
  rarity         Rarity?     @relation(fields: [rarityName], references: [name])
  nfts           NFT[]
  tags           Tag[]       @relation("ItemToTag")
}

model Tag {
  name  String @id @unique
  items Item[] @relation("ItemToTag")
}

model Rarity {
  name  String @unique
  items Item[]
}

model Collection {
  name  String @unique
  items Item[]
}

model Sale {
  id            Int      @id @default(autoincrement())
  transactionId String   @unique
  price         Float    @default(0)
  date          DateTime
  fromPlayer    String
  toPlayer      String
  nftId         String
  from          Player   @relation("fromPlayer", fields: [fromPlayer], references: [name])
  nft           NFT      @relation(fields: [nftId], references: [composedId])
  to            Player   @relation("toPlayer", fields: [toPlayer], references: [name])
}

model Drop {
  id         Int      @id @default(autoincrement())
  date       DateTime
  toPlayer   String
  composedId String?
  nft        NFT?     @relation(fields: [composedId], references: [composedId])
  to         Player   @relation("toPlayer", fields: [toPlayer], references: [name])
}

model Guild {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  discordUrl   String?
  tag          String?
  discordGuild DiscordGuild?
  members      Player[]      @relation("memberOfGuild")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  discriminator String?
  global_name   String?
  verified      Boolean?       @default(false)
  mfa_enabled   Boolean?       @default(false)
  banner        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  playerName    String?        @unique
  accounts      Account[]
  sessions      Session[]
  player        Player?        @relation(fields: [playerName], references: [name])
  discordGuild  DiscordGuild[] @relation("DiscordGuildToUser")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String 
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model DiscordGuild {
  id                         String   @id @unique
  name                       String   @unique
  guildName                  String?  @unique
  icon                       String?
  ownerId                    String?
  approximate_number_count   Int?
  approximate_presence_count Int?
  description                String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  guild                      Guild?   @relation(fields: [guildName], references: [name])
  user                       User[]   @relation("DiscordGuildToUser")

  @@map("discord_guilds")
}
