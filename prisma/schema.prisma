generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  name      String @unique
  spent     Float  @default(0)
  sold      Float  @default(0)
  balance   Float  @default(0)
  drops     Drop[] @relation("toUser")
  nfts      NFT[]
  purchases Sale[] @relation("toUser")
  sales     Sale[] @relation("fromUser")
}

model NFT {
  id          Int       @id @default(autoincrement())
  composedId  String    @unique
  issuedId    Int
  lootDate    DateTime?
  ownerName   String?
  archetypeId String?
  drops       Drop[]
  item        Item?     @relation(fields: [archetypeId], references: [archetypeId])
  owner       User?     @relation(fields: [ownerName], references: [name])
  sales       Sale[]
}

model Item {
  archetypeId    String      @id @unique
  name           String      @unique
  description    String?
  imageUrl       String?
  floorPrice     Float?
  maxIssuance    Int
  setName        String?
  rarityName     String?
  collectionName String?
  optionName     String
  collection     Collection? @relation(fields: [collectionName], references: [name])
  rarity         Rarity?     @relation(fields: [rarityName], references: [name])
  set            Set?        @relation(fields: [setName], references: [name])
  nfts           NFT[]
  categories     Category[]  @relation("CategoryToItem")
}

model Category {
  name  String @id @unique
  items Item[] @relation("CategoryToItem")
}

model Rarity {
  name  String @unique
  items Item[]
}

model Collection {
  name  String @unique
  items Item[]
}

model Set {
  name  String @unique
  items Item[]
}

model Sale {
  id       Int      @id @default(autoincrement())
  price    Float
  date     DateTime
  fromUser String
  toUser   String
  nftId    String?
  nft      NFT?     @relation(fields: [nftId], references: [composedId])
  to       User     @relation("toUser", fields: [toUser], references: [name])
  from     User     @relation("fromUser", fields: [fromUser], references: [name])
}

model Drop {
  id     Int      @id @default(autoincrement())
  date   DateTime
  toUser String
  nftId  Int?
  nft    NFT?     @relation(fields: [nftId], references: [id])
  to     User     @relation("toUser", fields: [toUser], references: [name])
}

model OLHistory {
  archetypeId String       @id
  totalItems  Int
  lastApiPull DateTime
  lastSync    DateTime?
  synced      Boolean
  olTransfers OLTransfer[]
}

model OLTransfer {
  id          Int        @id @default(autoincrement())
  composedId  String     @unique
  issuedId    Int
  eventName   String
  price       Float?
  fromUser    String
  toUser      String
  date        DateTime
  processed   Boolean    @default(false)
  archetypeId String?
  OLHistory   OLHistory? @relation(fields: [archetypeId], references: [archetypeId])
}
